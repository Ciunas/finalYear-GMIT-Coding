/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Assignment_7_Applet;

import java.awt.Color;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.ParseException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Mark Pendergast
 */
public class DatabaseApplet extends javax.swing.JApplet {

    private final int UPDATETAB = 1;
    /**
     * Initializes the applet DatabaseApplet
     */
    @Override
    public void init() {
        

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                    getContentPane().setBackground(Color.WHITE);
                    setupFormatters();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
   /*
    * Add mask formatters and other custom changes to the forms (not handled by Netbeans)
    * 
    * 
    */ 
    public void setupFormatters() 
    {
       try{
        MaskFormatter phoneMask = new MaskFormatter("(###) ###-####");
        phoneMask.setPlaceholderCharacter('_');
        MaskFormatter zipMask = new MaskFormatter("#####-####");
        zipMask.setPlaceholderCharacter('_');
        
        phoneField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(phoneMask));
        phoneFieldUpd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(phoneMask));
        zipField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(zipMask));
        zipFieldUpd.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(zipMask));
       }
       catch(ParseException ex)
       {
           messageLabel.setText("initialization error");
       }
       getContentPane().setBackground(Color.WHITE);
       resultsTable.setBackground(Color.WHITE);
       JTableHeader header = resultsTable.getTableHeader();
       header.setBackground(new Color(51, 153, 255));
       header.setForeground(Color.WHITE);     
    }
/**
 * setMessageLabel
 * 
 * changes the text in the message label at the bottom of the applet.
 * 
 * @param msg String to be placed in the message label
 */
    public void setMessageLabel(String msg)
    {
      messageLabel.setText(msg);
    }
    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        searchTab = new javax.swing.JPanel();
        resultTableScrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        searchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        findCustomerButton = new javax.swing.JButton();
        deleteCustomerButton = new javax.swing.JButton();
        updateSelectedButton = new javax.swing.JButton();
        updateTab = new javax.swing.JPanel();
        idLabelUpd = new javax.swing.JLabel();
        idFieldUpd = new javax.swing.JTextField();
        lastNameLabelUpd = new javax.swing.JLabel();
        lastNameFieldUpd = new javax.swing.JTextField();
        lastNameFieldUpd.setInputVerifier(new StringVerifier(1,50));
        firstNameLabelUpd = new javax.swing.JLabel();
        firstNameFieldUpd = new javax.swing.JTextField();
        firstNameFieldUpd.setInputVerifier(new StringVerifier(1,50));
        addressLine1LabelUpd = new javax.swing.JLabel();
        addressLine1FieldUpd = new javax.swing.JTextField();
        addressLine1FieldUpd.setInputVerifier(new StringVerifier(1,256));
        addressLine2LabelUpd = new javax.swing.JLabel();
        addressLine2FieldUpd = new javax.swing.JTextField();
        addressLine2FieldUpd.setInputVerifier(new StringVerifier(0,256));
        cityLabelUpd = new javax.swing.JLabel();
        cityFieldUpd = new javax.swing.JTextField();
        cityFieldUpd.setInputVerifier(new StringVerifier(1,50));
        stateLabelUpd = new javax.swing.JLabel();
        stateComboUpd = new javax.swing.JComboBox();
        zipLabelUpd = new javax.swing.JLabel();
        zipFieldUpd = new javax.swing.JFormattedTextField();
        zipFieldUpd.setInputVerifier(new StringVerifier(1,20));
        phoneNumberLabelUpd = new javax.swing.JLabel();
        phoneFieldUpd = new javax.swing.JFormattedTextField();
        phoneFieldUpd.setInputVerifier(new StringVerifier(1,20));
        updateButton = new javax.swing.JButton();
        clearButtonUpd = new javax.swing.JButton();
        addTab = new javax.swing.JPanel();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        addressLine1Label = new javax.swing.JLabel();
        addressLine2Label = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        zipLabel = new javax.swing.JLabel();
        phoneNumberLabel = new javax.swing.JLabel();
        phoneField = new javax.swing.JFormattedTextField();
        phoneField.setInputVerifier(new StringVerifier(1,20));
        zipField = new javax.swing.JFormattedTextField();
        zipField.setInputVerifier(new StringVerifier(1,20));
        stateCombo = new javax.swing.JComboBox();
        cityField = new javax.swing.JTextField();
        cityField.setInputVerifier(new StringVerifier(1,50));
        addressLine2Field = new javax.swing.JTextField();
        addressLine2Field.setInputVerifier(new StringVerifier(0,256));
        addressLine1Field = new javax.swing.JTextField();
        addressLine1Field.setInputVerifier(new StringVerifier(1,256));
        firstNameField = new javax.swing.JTextField();
        firstNameField.setInputVerifier(new StringVerifier(1,50));
        lastNameField = new javax.swing.JTextField();
        lastNameField.setInputVerifier(new StringVerifier(1,50));
        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        idLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        idField.setInputVerifier(new StringVerifier(1,20));
        statusPanel = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();

        tabbedPane.setBackground(new Color(51, 153, 255));
        tabbedPane.setForeground(new Color(255, 255, 255));
        tabbedPane.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N

        searchTab.setBackground(new Color(255, 255, 255));
        searchTab.setLayout(null);

        resultTableScrollPane.setBackground(new Color(255, 255, 255));
        resultTableScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Results", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14), new Color(51, 153, 255))); // NOI18N

        resultsTable.setAutoCreateRowSorter(true);
        resultsTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Address 1", "Address 2", "City", "State", "Zip", "Phone"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setFillsViewportHeight(true);
        resultsTable.setGridColor(new Color(51, 102, 255));
        resultsTable.setInheritsPopupMenu(true);
        resultsTable.setPreferredSize(new java.awt.Dimension(760, 16));
        resultsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultTableScrollPane.setViewportView(resultsTable);

        searchTab.add(resultTableScrollPane);
        resultTableScrollPane.setBounds(0, 10, 790, 300);

        searchLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        searchLabel.setText("Last Name:");
        searchTab.add(searchLabel);
        searchLabel.setBounds(10, 320, 70, 17);

        searchField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        searchTab.add(searchField);
        searchField.setBounds(80, 320, 110, 23);

        findCustomerButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        findCustomerButton.setText("Find");
        findCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findCustomerButtonActionPerformed(evt);
            }
        });
        searchTab.add(findCustomerButton);
        findCustomerButton.setBounds(200, 320, 80, 20);

        deleteCustomerButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        deleteCustomerButton.setText("Delete Selected Record");
        deleteCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerButtonActionPerformed(evt);
            }
        });
        searchTab.add(deleteCustomerButton);
        deleteCustomerButton.setBounds(290, 320, 200, 20);

        updateSelectedButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        updateSelectedButton.setText("Update Selected Record");
        updateSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSelectedButtonActionPerformed(evt);
            }
        });
        searchTab.add(updateSelectedButton);
        updateSelectedButton.setBounds(500, 320, 240, 20);

        tabbedPane.addTab("Customer Search", searchTab);

        updateTab.setBackground(new Color(255, 255, 255));
        updateTab.setLayout(null);

        idLabelUpd.setText("ID:");
        updateTab.add(idLabelUpd);
        idLabelUpd.setBounds(110, 30, 17, 16);

        idFieldUpd.setEnabled(false);
        updateTab.add(idFieldUpd);
        idFieldUpd.setBounds(210, 30, 180, 22);

        lastNameLabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lastNameLabelUpd.setText("Last Name:");
        updateTab.add(lastNameLabelUpd);
        lastNameLabelUpd.setBounds(110, 90, 64, 17);

        lastNameFieldUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lastNameFieldUpd.setToolTipText("Enter your last name");
        updateTab.add(lastNameFieldUpd);
        lastNameFieldUpd.setBounds(210, 90, 178, 23);

        firstNameLabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        firstNameLabelUpd.setText("First Name:");
        updateTab.add(firstNameLabelUpd);
        firstNameLabelUpd.setBounds(110, 60, 65, 17);

        firstNameFieldUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        firstNameFieldUpd.setToolTipText("Enter your first name");
        updateTab.add(firstNameFieldUpd);
        firstNameFieldUpd.setBounds(210, 60, 178, 23);

        addressLine1LabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine1LabelUpd.setText("Address Line1:");
        updateTab.add(addressLine1LabelUpd);
        addressLine1LabelUpd.setBounds(110, 120, 92, 17);

        addressLine1FieldUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine1FieldUpd.setToolTipText("Enter your street address");
        updateTab.add(addressLine1FieldUpd);
        addressLine1FieldUpd.setBounds(210, 120, 178, 23);

        addressLine2LabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine2LabelUpd.setText("Address Line2:");
        updateTab.add(addressLine2LabelUpd);
        addressLine2LabelUpd.setBounds(110, 150, 92, 17);

        addressLine2FieldUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine2FieldUpd.setToolTipText("Enter your apartment or suite number");
        updateTab.add(addressLine2FieldUpd);
        addressLine2FieldUpd.setBounds(210, 150, 178, 23);

        cityLabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cityLabelUpd.setText("City:");
        updateTab.add(cityLabelUpd);
        cityLabelUpd.setBounds(110, 180, 70, 17);

        cityFieldUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cityFieldUpd.setToolTipText("Enter your city");
        updateTab.add(cityFieldUpd);
        cityFieldUpd.setBounds(210, 180, 178, 23);

        stateLabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        stateLabelUpd.setText("State:");
        updateTab.add(stateLabelUpd);
        stateLabelUpd.setBounds(110, 210, 34, 17);

        stateComboUpd.setBackground(new Color(254, 255, 255));
        stateComboUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        stateComboUpd.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY" }));
        stateComboUpd.setToolTipText("Select your state's abbreviation");
        updateTab.add(stateComboUpd);
        stateComboUpd.setBounds(210, 210, 60, 23);

        zipLabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        zipLabelUpd.setText("Zip Code:");
        updateTab.add(zipLabelUpd);
        zipLabelUpd.setBounds(110, 240, 52, 17);
        updateTab.add(zipFieldUpd);
        zipFieldUpd.setBounds(210, 240, 130, 22);

        phoneNumberLabelUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        phoneNumberLabelUpd.setText("Phone Number:");
        updateTab.add(phoneNumberLabelUpd);
        phoneNumberLabelUpd.setBounds(110, 270, 88, 17);
        updateTab.add(phoneFieldUpd);
        phoneFieldUpd.setBounds(210, 270, 130, 22);

        updateButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        updateTab.add(updateButton);
        updateButton.setBounds(140, 300, 90, 25);

        clearButtonUpd.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        clearButtonUpd.setText("Clear");
        clearButtonUpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonUpdActionPerformed(evt);
            }
        });
        updateTab.add(clearButtonUpd);
        clearButtonUpd.setBounds(290, 300, 90, 25);

        tabbedPane.addTab("Update Customer", updateTab);

        addTab.setBackground(new Color(255, 255, 255));
        addTab.setLayout(null);

        lastNameLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lastNameLabel.setText("Last Name:");
        addTab.add(lastNameLabel);
        lastNameLabel.setBounds(110, 90, 64, 17);

        firstNameLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        firstNameLabel.setText("First Name:");
        addTab.add(firstNameLabel);
        firstNameLabel.setBounds(110, 60, 65, 17);

        addressLine1Label.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine1Label.setText("Address Line1:");
        addTab.add(addressLine1Label);
        addressLine1Label.setBounds(110, 120, 92, 17);

        addressLine2Label.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine2Label.setText("Address Line2:");
        addTab.add(addressLine2Label);
        addressLine2Label.setBounds(110, 150, 92, 17);

        cityLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cityLabel.setText("City:");
        addTab.add(cityLabel);
        cityLabel.setBounds(110, 180, 70, 17);

        stateLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        stateLabel.setText("State:");
        addTab.add(stateLabel);
        stateLabel.setBounds(110, 210, 34, 17);

        zipLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        zipLabel.setText("Zip Code:");
        addTab.add(zipLabel);
        zipLabel.setBounds(110, 240, 52, 17);

        phoneNumberLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        phoneNumberLabel.setText("Phone Number:");
        addTab.add(phoneNumberLabel);
        phoneNumberLabel.setBounds(110, 270, 88, 17);
        addTab.add(phoneField);
        phoneField.setBounds(210, 270, 130, 22);
        addTab.add(zipField);
        zipField.setBounds(210, 240, 130, 22);

        stateCombo.setBackground(new Color(254, 255, 255));
        stateCombo.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        stateCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH", "NJ", "NM", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY" }));
        stateCombo.setToolTipText("Select your state's abbreviation");
        addTab.add(stateCombo);
        stateCombo.setBounds(210, 210, 60, 23);

        cityField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cityField.setToolTipText("Enter your city");
        addTab.add(cityField);
        cityField.setBounds(210, 180, 178, 23);

        addressLine2Field.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine2Field.setToolTipText("Enter your apartment or suite number");
        addTab.add(addressLine2Field);
        addressLine2Field.setBounds(210, 150, 178, 23);

        addressLine1Field.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addressLine1Field.setToolTipText("Enter your street address");
        addTab.add(addressLine1Field);
        addressLine1Field.setBounds(210, 120, 178, 23);

        firstNameField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        firstNameField.setToolTipText("Enter your first name");
        addTab.add(firstNameField);
        firstNameField.setBounds(210, 60, 178, 23);

        lastNameField.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        lastNameField.setToolTipText("Enter your last name");
        addTab.add(lastNameField);
        lastNameField.setBounds(210, 90, 178, 23);

        addButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addTab.add(addButton);
        addButton.setBounds(140, 300, 90, 25);

        clearButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        addTab.add(clearButton);
        clearButton.setBounds(290, 300, 90, 25);

        idLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        idLabel.setText("ID:");
        addTab.add(idLabel);
        idLabel.setBounds(110, 30, 60, 17);
        addTab.add(idField);
        idField.setBounds(210, 30, 180, 22);

        tabbedPane.addTab("Add Customer Record", addTab);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);
        tabbedPane.getAccessibleContext().setAccessibleName("Search");

        statusPanel.setBackground(new Color(51, 153, 255));

        messageLabel.setBackground(new Color(51, 153, 255));
        messageLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        messageLabel.setForeground(new Color(255, 255, 255));
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText("   ");
        statusPanel.add(messageLabel);

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
/**
 * 
 *  Find customers based on partial last name entered by the user
 * @param
 */
    private void findCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findCustomerButtonActionPerformed

    try{
      DefaultTableModel tm = (DefaultTableModel)resultsTable.getModel();
      String lastName = searchField.getText();
        System.out.println("address trying to access: "+ new URL(this.getResource() + "Assignment_7_Servlet/FindCustomer"));
      URL link = new URL(getCodeBase()+"Assignment_7_Servlet/FindCustomer");
      clearResults();
      setMessageLabel("Processing request ...");
      HttpURLConnection urlconnection = (HttpURLConnection) link.openConnection();
      
      urlconnection.setDoOutput(true);
      urlconnection.setDoInput(true);
      urlconnection.setUseCaches (false); 
      urlconnection.setDefaultUseCaches (false); 

      // Specify the content type that we will send binary data 
      urlconnection.setRequestProperty ("Content-Type", "application/octet-stream"); 

      ObjectOutputStream oos = new ObjectOutputStream(urlconnection.getOutputStream());
      oos.writeObject(lastName);
     
      ObjectInputStream ois = new ObjectInputStream(urlconnection.getInputStream());
      while(true)
      {
       Customer c = (Customer)ois.readObject(); 
       if(c.id.length() == 0)  // empty id indicates last customer
            break;
       else
       {
        Object[] row = {c.id,c.firstName,c.lastName,c.address1,c.address2,c.city,c.state,c.zip,c.phone};
        tm.addRow(row);     
       }
      } 
      oos.close();
      ois.close(); 
      setMessageLabel(tm.getRowCount()+" records found");
    }
    catch(Exception ex)
    {
     setMessageLabel("Error processing request : "+ex.toString());
       // setMessageLabel(getCodeBase() + "Assignment_7_Servlet/FindCustomer");
    }
   
    }//GEN-LAST:event_findCustomerButtonActionPerformed
/**
 * Delete the selected record from the database
 * @param evt 
 */
    private void deleteCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerButtonActionPerformed

   try{
      int row = resultsTable.getSelectedRow();
      if(row < 0)
      {
       messageLabel.setText("No Row Selected");
       return;
      }
     
          
      String ID = (String)resultsTable.getValueAt(row,0);
      URL link = new URL(getCodeBase()+"Assignment_7_Servlet/DeleteCustomer");
      setMessageLabel("Processing request ...");
      HttpURLConnection urlconnection = (HttpURLConnection) link.openConnection();
      
      urlconnection.setDoOutput(true);
      urlconnection.setDoInput(true);
      urlconnection.setUseCaches (false); 
      urlconnection.setDefaultUseCaches (false); 

      // Specify the content type that we will send binary data 
      urlconnection.setRequestProperty ("Content-Type", "application/octet-stream"); 

      ObjectOutputStream oos = new ObjectOutputStream(urlconnection.getOutputStream());
      oos.writeObject(ID);  // send the id
     
      ObjectInputStream ois = new ObjectInputStream(urlconnection.getInputStream());
      int count = ois.readInt();  // read back the number of rows deleted
      oos.close();
      ois.close(); 
      
      setMessageLabel(count+" records deleted");
      if(count > 0)
      {
       DefaultTableModel tm = (DefaultTableModel)resultsTable.getModel();
       tm.removeRow(row); // remove the row from the screen
      }
    }
    catch(Exception ex)
    {
      messageLabel.setText("Error processing request");
    }     
        
        
    }//GEN-LAST:event_deleteCustomerButtonActionPerformed
/**
 *   
 * Send the add request to the server
 * 
 * @param evt 
 */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed


        try{
            Customer c = new Customer(idField.getText(),lastNameField.getText(),firstNameField.getText(),
                    addressLine1Field.getText(),addressLine2Field.getText(),cityField.getText(),
                    (String)stateCombo.getSelectedItem(),zipField.getText(),phoneField.getText());
            
            URL link = new URL(getCodeBase()+"Assignment_7_Servlet/AddCustomer");
               
            
          setMessageLabel("Processing request ...");
          HttpURLConnection urlconnection = (HttpURLConnection) link.openConnection();

          urlconnection.setDoOutput(true);
          urlconnection.setDoInput(true);
          urlconnection.setUseCaches (false); 
          urlconnection.setDefaultUseCaches (false); 

          // Specify the content type that we will send binary data 
          urlconnection.setRequestProperty ("Content-Type", "application/octet-stream"); 

          ObjectOutputStream oos = new ObjectOutputStream(urlconnection.getOutputStream());
          oos.writeObject(c);  // send the customer
          oos.flush();

          ObjectInputStream ois = new ObjectInputStream(urlconnection.getInputStream());
          int count = ois.readInt();  // read back the number of rows deleted
          oos.close();
          ois.close(); 

          setMessageLabel(count+" records added");

        }
        catch(Exception ex)
        {
          setMessageLabel("Unable to process request : "+ex.toString());
        }

    }//GEN-LAST:event_addButtonActionPerformed
/**
 * Clear all the fields on the add customer panel
 * @param evt 
 */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed

        idField.setText("");
        lastNameField.setText("");
        firstNameField.setText("");
        addressLine1Field.setText("");
        addressLine2Field.setText("");
        cityField.setText("");
        stateCombo.setSelectedIndex(0);
        zipField.setText("");
        phoneField.setText("");
        zipFieldUpd.setText("");
        phoneFieldUpd.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed
/**
 * 
 * Send the update request to the server
 * 
 * @param evt 
 */
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed

         try{
            Customer c = new Customer(idFieldUpd.getText(),lastNameFieldUpd.getText(),firstNameFieldUpd.getText(),
                    addressLine1FieldUpd.getText(),addressLine2FieldUpd.getText(),cityFieldUpd.getText(),
                    (String)stateComboUpd.getSelectedItem(),zipFieldUpd.getText(),phoneFieldUpd.getText());
            
            URL link = new URL(getCodeBase()+"Assignment_7_Servlet/UpdateCustomer");
               
        
          setMessageLabel("Processing request ...");
          HttpURLConnection urlconnection = (HttpURLConnection) link.openConnection();

          urlconnection.setDoOutput(true);
          urlconnection.setDoInput(true);
          urlconnection.setUseCaches (false); 
          urlconnection.setDefaultUseCaches (false); 

          // Specify the content type that we will send binary data 
          urlconnection.setRequestProperty ("Content-Type", "application/octet-stream"); 

          ObjectOutputStream oos = new ObjectOutputStream(urlconnection.getOutputStream());
          oos.writeObject(c);  // send the customer
          oos.flush();

          ObjectInputStream ois = new ObjectInputStream(urlconnection.getInputStream());
          int count = ois.readInt();  // read back the number of rows deleted
          oos.close();
          ois.close(); 

          setMessageLabel(count+" records updated");


        }
        catch(Exception ex)
        {
          setMessageLabel("Unable to process request "+ex.toString());
        }

    }//GEN-LAST:event_updateButtonActionPerformed
/**
 * 
 * Clear the Update tab fields
 * @param evt 
 */
    private void clearButtonUpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonUpdActionPerformed

        lastNameFieldUpd.setText("");
        firstNameFieldUpd.setText("");
        addressLine1FieldUpd.setText("");
        addressLine2FieldUpd.setText("");
        cityFieldUpd.setText("");
        stateComboUpd.setSelectedIndex(0);
        zipFieldUpd.setText("");
        phoneFieldUpd.setText("");
    }//GEN-LAST:event_clearButtonUpdActionPerformed
/**
 * 
 *  Send copy data from the selected table row to the update tab, then make it visible
 * 
 */
    private void updateSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSelectedButtonActionPerformed
       int row = resultsTable.getSelectedRow();
       if(row < 0)
       {
        messageLabel.setText("No Row Selected");
        return;
       }
      
        idFieldUpd.setText((String)resultsTable.getValueAt(row,0));
        firstNameFieldUpd.setText((String)resultsTable.getValueAt(row,1));
        lastNameFieldUpd.setText((String)resultsTable.getValueAt(row,2));
        addressLine1FieldUpd.setText((String)resultsTable.getValueAt(row,3));
        addressLine2FieldUpd.setText((String)resultsTable.getValueAt(row,4));
        cityFieldUpd.setText((String)resultsTable.getValueAt(row,5));
        String state = ((String)resultsTable.getValueAt(row,6));       
        stateComboUpd.setSelectedItem(state.trim());
        zipFieldUpd.setText((String)resultsTable.getValueAt(row,7));
        phoneFieldUpd.setText((String)resultsTable.getValueAt(row,8));   
      
        setMessageLabel(" ");
        tabbedPane.setSelectedIndex(UPDATETAB);
        
    }//GEN-LAST:event_updateSelectedButtonActionPerformed
/**
 * clear the result table
 * @params
 */
    public void clearResults()
    {
      DefaultTableModel tm = (DefaultTableModel)resultsTable.getModel();
      tm.setRowCount(0); // clear the table
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addTab;
    private javax.swing.JTextField addressLine1Field;
    private javax.swing.JTextField addressLine1FieldUpd;
    private javax.swing.JLabel addressLine1Label;
    private javax.swing.JLabel addressLine1LabelUpd;
    private javax.swing.JTextField addressLine2Field;
    private javax.swing.JTextField addressLine2FieldUpd;
    private javax.swing.JLabel addressLine2Label;
    private javax.swing.JLabel addressLine2LabelUpd;
    private javax.swing.JTextField cityField;
    private javax.swing.JTextField cityFieldUpd;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JLabel cityLabelUpd;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearButtonUpd;
    private javax.swing.JButton deleteCustomerButton;
    private javax.swing.JButton findCustomerButton;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JTextField firstNameFieldUpd;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JLabel firstNameLabelUpd;
    private javax.swing.JTextField idField;
    private javax.swing.JTextField idFieldUpd;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel idLabelUpd;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField lastNameFieldUpd;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel lastNameLabelUpd;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JFormattedTextField phoneField;
    private javax.swing.JFormattedTextField phoneFieldUpd;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JLabel phoneNumberLabelUpd;
    private javax.swing.JScrollPane resultTableScrollPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JPanel searchTab;
    private javax.swing.JComboBox stateCombo;
    private javax.swing.JComboBox stateComboUpd;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JLabel stateLabelUpd;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton updateButton;
    private javax.swing.JButton updateSelectedButton;
    private javax.swing.JPanel updateTab;
    private javax.swing.JFormattedTextField zipField;
    private javax.swing.JFormattedTextField zipFieldUpd;
    private javax.swing.JLabel zipLabel;
    private javax.swing.JLabel zipLabelUpd;
    // End of variables declaration//GEN-END:variables
}
